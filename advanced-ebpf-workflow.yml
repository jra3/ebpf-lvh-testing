name: Advanced eBPF Multi-Kernel Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly tests against latest kernels

jobs:
  test-matrix:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          # LTS kernels
          - kernel: "5.15-main"
            arch: "amd64"
            tests: "basic"
          - kernel: "6.1-main"
            arch: "amd64"
            tests: "full"
          - kernel: "6.6-main"
            arch: "amd64"
            tests: "full"
          # Latest stable
          - kernel: "6.7-main"
            arch: "amd64"
            tests: "full"
          # Development kernel
          - kernel: "bpf-next"
            arch: "amd64"
            tests: "experimental"
          # ARM64 testing
          - kernel: "6.6-main"
            arch: "arm64"
            tests: "basic"
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Cache LVH kernels
      uses: actions/cache@v3
      with:
        path: ~/.lvh/kernels
        key: lvh-kernels-${{ matrix.kernel }}-${{ matrix.arch }}-v1
    
    - name: Install LVH and dependencies
      run: |
        go install github.com/cilium/little-vm-helper/cmd/lvh@latest
        sudo apt-get update
        sudo apt-get install -y qemu-kvm qemu-system-x86 qemu-system-arm \
          mmdebstrap debian-archive-keyring libguestfs-tools \
          clang-15 llvm-15 libelf-dev libbpf-dev gcc-multilib \
          bpftool linux-tools-common
    
    - name: Pull or build kernel
      run: |
        if [[ "${{ matrix.kernel }}" == "bpf-next" ]]; then
          # For bpf-next, we might want to build from source
          lvh kernels --dir _kernels init
          lvh kernels --dir _kernels add bpf-next \
            git://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf-next.git \
            --fetch
          lvh kernels --dir _kernels build bpf-next --arch ${{ matrix.arch }}
        else
          # Use pre-built kernels for stable versions
          lvh kernels pull ${{ matrix.kernel }} --arch ${{ matrix.arch }}
        fi
    
    - name: Download VM image
      run: |
        if [[ ! -f "test-vm.qcow2" ]]; then
          wget -O test-vm.qcow2 \
            https://github.com/cilium/little-vm-helper/releases/download/v0.0.12/base.qcow2
        fi
    
    - name: Build eBPF programs
      run: |
        make -C src/bpf clean build
        # Or use specific build commands:
        # clang -O2 -g -target bpf -D__TARGET_ARCH_${{ matrix.arch }} \
        #   -c src/bpf/my_prog.c -o build/my_prog.o
    
    - name: Run VM tests
      timeout-minutes: 30
      run: |
        # Determine kernel path
        if [[ "${{ matrix.kernel }}" == "bpf-next" ]]; then
          KERNEL_PATH="_kernels/data/kernels/bpf-next/arch/x86/boot/bzImage"
        else
          KERNEL_PATH="./kernels/${{ matrix.kernel }}/boot/bzImage"
        fi
        
        # Start VM with appropriate resources
        lvh run --image test-vm.qcow2 \
          --kernel $KERNEL_PATH \
          --arch ${{ matrix.arch }} \
          --host-mount $(pwd) \
          --qemu-disable-kvm \
          --cpu 4 --mem 4G \
          --daemonize \
          -p 2222:22 \
          --serial-port 2223
        
        # Wait for VM boot
        echo "Waiting for VM to boot..."
        for i in {1..60}; do
          if ssh -o ConnectTimeout=5 -o StrictHostKeyChecking=no -p 2222 root@localhost true 2>/dev/null; then
            echo "VM is ready"
            break
          fi
          sleep 2
        done
        
        # Run tests based on test suite
        case "${{ matrix.tests }}" in
          "basic")
            ssh -o StrictHostKeyChecking=no -p 2222 root@localhost << 'EOF'
              cd /host
              ./scripts/run_basic_tests.sh
        EOF
            ;;
          "full")
            ssh -o StrictHostKeyChecking=no -p 2222 root@localhost << 'EOF'
              cd /host
              apt-get update && apt-get install -y python3 python3-pip
              pip3 install -r test-requirements.txt
              pytest tests/ebpf/ -v --kernel-version=${{ matrix.kernel }}
        EOF
            ;;
          "experimental")
            ssh -o StrictHostKeyChecking=no -p 2222 root@localhost << 'EOF'
              cd /host
              # Run experimental features tests
              ./scripts/test_experimental_features.sh
        EOF
            ;;
        esac
        
        # Collect kernel logs
        ssh -o StrictHostKeyChecking=no -p 2222 root@localhost \
          "dmesg > /host/kernel-${{ matrix.kernel }}.log"
        
        # Stop VM
        lvh stop
    
    - name: Analyze test results
      if: always()
      run: |
        # Check for kernel panics or BPF verification errors
        if grep -q "kernel panic\|BPF verification error" kernel-*.log; then
          echo "Found critical errors in kernel logs"
          exit 1
        fi
    
    - name: Upload artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-artifacts-${{ matrix.kernel }}-${{ matrix.arch }}
        path: |
          test-results/
          *.log
          build/*.o