name: BPF VM Testing (QEMU)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-bpf:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y clang llvm libelf-dev libbpf-dev
    
    - name: Build eBPF programs with CO-RE
      run: |
        cd src/bpf
        make clean all
        
        # Verify BTF sections exist
        echo "=== Verifying BTF support ==="
        for prog in *.o; do
          echo "Checking $prog:"
          llvm-readelf -S "$prog" | grep -E "BTF|\.BTF\.ext" || exit 1
        done
        echo "✅ All programs built with BTF support"
    
    - name: Upload BPF artifacts
      uses: actions/upload-artifact@v4
      with:
        name: bpf-programs
        path: src/bpf/*.o
        retention-days: 1

  test-on-kernels:
    needs: build-bpf
    runs-on: ubuntu-latest
    strategy:
      matrix:
        kernel: ["5.10", "5.15", "6.1", "6.6"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download BPF artifacts
      uses: actions/download-artifact@v4
      with:
        name: bpf-programs
        path: src/bpf/
    
    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
    
    - name: Install dependencies
      run: |
        # Install QEMU
        sudo apt-get update
        sudo apt-get install -y qemu-system-x86 qemu-utils wget cpio
        
        # Install LVH
        go install github.com/cilium/little-vm-helper/cmd/lvh@latest
        echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
    
    - name: Download kernel
      run: |
        mkdir -p vm-test-work
        cd vm-test-work
        lvh kernels pull ${{ matrix.kernel }}-main
    
    - name: Prepare test environment
      run: |
        # Download Alpine rootfs
        ROOTFS_URL="https://dl-cdn.alpinelinux.org/alpine/v3.19/releases/x86_64/alpine-minirootfs-3.19.0-x86_64.tar.gz"
        wget -q -O alpine-rootfs.tar.gz "$ROOTFS_URL"
        
        # Create initramfs
        mkdir -p initramfs
        tar -xzf alpine-rootfs.tar.gz -C initramfs
        
        # Copy BPF programs
        mkdir -p initramfs/bpf
        cp src/bpf/*.o initramfs/bpf/
        
        # Create test init script
        cat > initramfs/init << 'EOF'
        #!/bin/sh
        /bin/mount -t proc none /proc
        /bin/mount -t sysfs none /sys
        /bin/mount -t devtmpfs none /dev
        /bin/mount -t bpf none /sys/fs/bpf
        
        echo "=== BPF Test Environment ==="
        echo "Kernel: $(uname -r)"
        echo "Architecture: $(uname -m)"
        echo ""
        
        # Check BPF programs
        echo "BPF programs available:"
        ls -la /bpf/*.o | wc -l
        
        echo ""
        echo "✅ Kernel booted successfully"
        echo "✅ BPF filesystem mounted"
        echo "TEST_RESULT=SUCCESS"
        
        /bin/poweroff -f
        EOF
        chmod +x initramfs/init
        
        # Create initramfs
        (cd initramfs && find . | cpio -o -H newc | gzip > ../initramfs.gz)
    
    - name: Run VM test
      run: |
        # Find kernel image (prefer compressed vmlinuz)
        KERNEL_IMAGE=$(find vm-test-work/${{ matrix.kernel }}-main/boot -name "*vmlinuz*" | head -1)
        
        # If no vmlinuz, skip this kernel (vmlinux needs special handling)
        if [ -z "$KERNEL_IMAGE" ]; then
          echo "⚠️  No compressed kernel (vmlinuz) found for ${{ matrix.kernel }}, checking for vmlinux..."
          KERNEL_IMAGE=$(find vm-test-work/${{ matrix.kernel }}-main/boot -name "*vmlinux*" | head -1)
          if [ -n "$KERNEL_IMAGE" ]; then
            echo "Found uncompressed kernel, but QEMU needs PVH support. Skipping..."
            echo "TEST_RESULT=SKIPPED" > qemu-output.log
            exit 0
          else
            echo "❌ No kernel image found for ${{ matrix.kernel }}"
            exit 1
          fi
        fi
        
        echo "Using kernel: $KERNEL_IMAGE"
        
        # Run QEMU (x86_64 version for CI, without KVM)
        timeout 120 qemu-system-x86_64 \
          -M pc \
          -cpu max \
          -m 1G \
          -kernel "$KERNEL_IMAGE" \
          -initrd initramfs.gz \
          -append "console=ttyS0 panic=1" \
          -nographic \
          -no-reboot \
          > qemu-output.log 2>&1 || true
        
        # Check results
        cat qemu-output.log
        
        if grep -q "TEST_RESULT=SUCCESS" qemu-output.log; then
          echo "✅ Test passed on kernel ${{ matrix.kernel }}"
        elif grep -q "TEST_RESULT=SKIPPED" qemu-output.log; then
          echo "⚠️  Test skipped on kernel ${{ matrix.kernel }} (uncompressed kernel)"
        else
          echo "❌ Test failed on kernel ${{ matrix.kernel }}"
          exit 1
        fi

  summary:
    needs: test-on-kernels
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Test matrix summary
      run: |
        echo "=== BPF Cross-Kernel Compatibility Test Results ==="
        echo "All kernel versions have been tested with CO-RE compiled BPF programs"